/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_BASE_FEEDBACK_PB_H_INCLUDED
#define PB_BASE_FEEDBACK_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _BaseFeedback {
    uint32_t robot_id; /* Robot identifier */
    float motor_1_speed;
    float motor_2_speed;
    float motor_3_speed;
    float motor_4_speed;
    float voltage;
    bool ir;
} BaseFeedback;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define BaseFeedback_init_default                {0, 0, 0, 0, 0, 0, 0}
#define BaseFeedback_init_zero                   {0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BaseFeedback_robot_id_tag                1
#define BaseFeedback_motor_1_speed_tag           2
#define BaseFeedback_motor_2_speed_tag           3
#define BaseFeedback_motor_3_speed_tag           4
#define BaseFeedback_motor_4_speed_tag           5
#define BaseFeedback_voltage_tag                 6
#define BaseFeedback_ir_tag                      7

/* Struct field encoding specification for nanopb */
#define BaseFeedback_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   robot_id,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_1_speed,     2) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_2_speed,     3) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_3_speed,     4) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_4_speed,     5) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,           6) \
X(a, STATIC,   SINGULAR, BOOL,     ir,                7)
#define BaseFeedback_CALLBACK NULL
#define BaseFeedback_DEFAULT NULL

extern const pb_msgdesc_t BaseFeedback_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BaseFeedback_fields &BaseFeedback_msg

/* Maximum encoded size of messages (where known) */
#define BaseFeedback_size                        33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
