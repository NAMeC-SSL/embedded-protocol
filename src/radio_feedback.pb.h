/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_RADIO_FEEDBACK_PB_H_INCLUDED
#define PB_RADIO_FEEDBACK_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _RadioFeedback {
    uint32_t robot_id; /* Robot identifier */
    float motor_1_speed;
    float motor_2_speed;
    float motor_3_speed;
    float motor_4_speed;
    float voltage;
    bool ir;
} RadioFeedback;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define RadioFeedback_init_default               {0, 0, 0, 0, 0, 0, 0}
#define RadioFeedback_init_zero                  {0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define RadioFeedback_robot_id_tag               1
#define RadioFeedback_motor_1_speed_tag          2
#define RadioFeedback_motor_2_speed_tag          3
#define RadioFeedback_motor_3_speed_tag          4
#define RadioFeedback_motor_4_speed_tag          5
#define RadioFeedback_voltage_tag                6
#define RadioFeedback_ir_tag                     7

/* Struct field encoding specification for nanopb */
#define RadioFeedback_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   robot_id,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_1_speed,     2) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_2_speed,     3) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_3_speed,     4) \
X(a, STATIC,   SINGULAR, FLOAT,    motor_4_speed,     5) \
X(a, STATIC,   SINGULAR, FLOAT,    voltage,           6) \
X(a, STATIC,   SINGULAR, BOOL,     ir,                7)
#define RadioFeedback_CALLBACK NULL
#define RadioFeedback_DEFAULT NULL

extern const pb_msgdesc_t RadioFeedback_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define RadioFeedback_fields &RadioFeedback_msg

/* Maximum encoded size of messages (where known) */
#define RadioFeedback_size                       33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
