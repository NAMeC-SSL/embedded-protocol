/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_BASE_COMMAND_PB_H_INCLUDED
#define PB_BASE_COMMAND_PB_H_INCLUDED
#include <pb.h>
#include "kicker.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _BaseCommand {
    /* The unique ID of the robot, as identified by SSL-Vision. */
    uint32_t robot_id;
    /* Desired forward drive velocity in meters / second. */
    float normal_velocity;
    /* Desired sideways left drive velocity in meters / second. */
    float tangential_velocity;
    /* Desired counter-clockwise angular velocity in radians / second. */
    float angular_velocity;
    Kicker kick;
    float kick_power;
    bool charge;
    float dribbler;
} BaseCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define BaseCommand_init_default                 {0, 0, 0, 0, _Kicker_MIN, 0, 0, 0}
#define BaseCommand_init_zero                    {0, 0, 0, 0, _Kicker_MIN, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BaseCommand_robot_id_tag                 1
#define BaseCommand_normal_velocity_tag          2
#define BaseCommand_tangential_velocity_tag      3
#define BaseCommand_angular_velocity_tag         4
#define BaseCommand_kick_tag                     5
#define BaseCommand_kick_power_tag               6
#define BaseCommand_charge_tag                   8
#define BaseCommand_dribbler_tag                 9

/* Struct field encoding specification for nanopb */
#define BaseCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   robot_id,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    normal_velocity,   2) \
X(a, STATIC,   SINGULAR, FLOAT,    tangential_velocity,   3) \
X(a, STATIC,   SINGULAR, FLOAT,    angular_velocity,   4) \
X(a, STATIC,   SINGULAR, UENUM,    kick,              5) \
X(a, STATIC,   SINGULAR, FLOAT,    kick_power,        6) \
X(a, STATIC,   SINGULAR, BOOL,     charge,            8) \
X(a, STATIC,   SINGULAR, FLOAT,    dribbler,          9)
#define BaseCommand_CALLBACK NULL
#define BaseCommand_DEFAULT NULL

extern const pb_msgdesc_t BaseCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BaseCommand_fields &BaseCommand_msg

/* Maximum encoded size of messages (where known) */
#define BaseCommand_size                         35

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
